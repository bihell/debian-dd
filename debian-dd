#!/bin/bash

# color
underLine='\033[4m'
aoiBlue='\033[36m'
blue='\033[34m'
yellow='\033[33m'
green='\033[32m'
red='\033[31m'
plain='\033[0m'

clear
# 检查是否是 root 用户
if [ "$EUID" -ne 0 ]; then
    echo "Error: Please use the root user to execute this script."
    exit
fi

echo "-----------------------------------------------------------------"
echo "This script was written by『数码乱炖』"
echo "If you have any questions, please raise an issue. "
echo -e "${aoiBlue}GitHub${plain}: https://github.com/bihell/debian-dd"
echo -e "${aoiBlue}VPS document${plain}: https://bigdata.icu/tools/vps.html"
echo "-----------------------------------------------------------------"
echo "Welcome to subscribe to my channel"
echo -e "${aoiBlue}YouTube${plain}：https://www.youtube.com/channel/UCINmrFonh6v0VTyWhudSQ2w"
echo -e "${aoiBlue}bilibili${plain}：https://space.bilibili.com/88900889"
echo -e "${aoiBlue}xigua${plain}：https://www.ixigua.com/home/940801951008103"
echo "-----------------------------------------------------------------"

echo -en "\n${aoiBlue}Installation dependencies...${plain}\n"
apt update
apt install wget net-tools -y

echo -en "\n${aoiBlue}Supported Versions:${plain}\n"
echo "[1] Debian 12 bookworm"
echo "[2] Debian 11 bullseye"
echo "[3] Debian 10 buster"
read -p "Please select [Default 1]:" version

if [ -z "$version" ]; then
    version=0
fi

if [ "$version" == "0" ] || [ "$version" == "1" ]; then
    debian_version="bookworm"
elif [ "$version" == "2" ]; then
    debian_version="bullseye"
elif [ "$version" == "3" ]; then
    debian_version="buster"
else 
    echo -e "${aoiBlue}No correct option entered, ready to exit...${plain}"
    sleep 1
    exit
fi

echo -en "\n${aoiBlue}Start installing Debian $debian_version...${plain}\n"

echo -en "\n${aoiBlue}Set hostname:${plain}\n"
read -p "Please input [Default digital-review]:" HostName
if [ -z "$HostName" ]; then
    HostName="digital-review"
fi

echo -ne "\n${aoiBlue}Set root password${plain}\n"
read -p "Please input [Enter directly to generate a random password]: " passwd
if [ -z "$passwd" ]; then
# Length of the password
    PASSWORD_LENGTH=16

    # Generate the password
    passwd=$(tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\\]^_`{|}~' </dev/urandom | head -c $PASSWORD_LENGTH)

    echo -e "Generated password: ${red}$passwd${plain}"
fi

echo -ne "\n${aoiBlue}Set ssh port${plain}\n"
read -p "Please input [Default 22]: " sshPORT
if [ -z "$sshPORT" ]; then
    sshPORT=22
fi

echo -ne "\n${aoiBlue}Whether to enable BBR${plain}\n"
read -p "Please input y/n [Default n]: " enableBBR
if [[ "$enableBBR" =~ ^[Yy]$ ]]; then
    bbr_path="/etc/sysctl.d/99-sysctl.conf"
    target="in-target"
    BBR="$target sed -i '\$anet.core.default_qdisc = fq' $bbr_path;$target sed -i '\$anet.ipv4.tcp_congestion_control = bbr' $bbr_path;$target sed -i '\$anet.ipv4.tcp_rmem = 8192 262144 536870912' $bbr_path;$target sed -i '\$anet.ipv4.tcp_wmem = 4096 16384 536870912' $bbr_path;$target sed -i '\$anet.ipv4.tcp_adv_win_scale = -2' $bbr_path;$target sed -i '\$anet.ipv4.tcp_collapse_max_bytes = 6291456' $bbr_path;$target sed -i '\$anet.ipv4.tcp_notsent_lowat = 131072' $bbr_path;$target sed -i '\$anet.ipv4.ip_local_port_range = 1024 65535' $bbr_path;$target sed -i '\$anet.core.rmem_max = 536870912' $bbr_path;$target sed -i '\$anet.core.wmem_max = 536870912' $bbr_path;$target sed -i '\$anet.core.somaxconn = 32768' $bbr_path;$target sed -i '\$anet.core.netdev_max_backlog = 32768' $bbr_path;$target sed -i '\$anet.ipv4.tcp_max_tw_buckets = 65536' $bbr_path;$target sed -i '\$anet.ipv4.tcp_abort_on_overflow = 1' $bbr_path;$target sed -i '\$anet.ipv4.tcp_slow_start_after_idle = 0' $bbr_path;$target sed -i '\$anet.ipv4.tcp_timestamps = 1' $bbr_path;$target sed -i '\$anet.ipv4.tcp_syncookies = 0' $bbr_path;$target sed -i '\$anet.ipv4.tcp_syn_retries = 3' $bbr_path;$target sed -i '\$anet.ipv4.tcp_synack_retries = 3' $bbr_path;$target sed -i '\$anet.ipv4.tcp_max_syn_backlog = 32768' $bbr_path;$target sed -i '\$anet.ipv4.tcp_fin_timeout = 15' $bbr_path;$target sed -i '\$anet.ipv4.tcp_keepalive_intvl = 3' $bbr_path;$target sed -i '\$anet.ipv4.tcp_keepalive_probes = 5' $bbr_path;$target sed -i '\$anet.ipv4.tcp_keepalive_time = 600' $bbr_path;$target sed -i '\$anet.ipv4.tcp_retries1 = 3' $bbr_path;$target sed -i '\$anet.ipv4.tcp_retries2 = 5' $bbr_path;$target sed -i '\$anet.ipv4.tcp_no_metrics_save = 1' $bbr_path;$target sed -i '\$anet.ipv4.ip_forward = 1' $bbr_path;$target sed -i '\$afs.file-max = 104857600' $bbr_path;$target sed -i '\$afs.inotify.max_user_instances = 8192' $bbr_path;$target sed -i '\$afs.nr_open = 1048576' $bbr_path;$target sed -i '\$anet.ipv4.tcp_fastopen=3' $bbr_path;"
else
    BBR=""
fi

# Get the device number of the root directory
root_device=$(df / | awk 'NR==2 {print $1}')

# Extract the partition number from the device number
partitionr_root_number=$(echo "$root_device" | grep -oE '[0-9]+$')

# Check if any disk is mounted
if [ -z "$(df -h)" ]; then
    echo "No disks are currently mounted."
    exit 1
fi

# Extract the device name of the root partition
ROOT_DEVICE=$(df / | grep -oE '/dev/[a-z]+')

# Extract the device prefix (sda or vda)
DEVICE_PREFIX=$(echo "$ROOT_DEVICE" | grep -oE 'sda|vda')

# Check if the device prefix is present
if [ -n "$DEVICE_PREFIX" ]; then
    echo "The root partition is mounted on a device with the prefix: $DEVICE_PREFIX"
else
    echo "Could not determine the device naming prefix. Defaulting to sda."
    DEVICE_PREFIX="sda"
fi

echo -en "\n${aoiBlue}Download boot file...${plain}\n"

rm -rf /netboot
mkdir /netboot && cd /netboot
wget https://ftp.debian.org/debian/dists/$debian_version/main/installer-amd64/current/images/netboot/debian-installer/amd64/linux
wget https://ftp.debian.org/debian/dists/$debian_version/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz

# Get the name of the active network interface
interface=$(ip -o link show | awk '$2 != "lo:" {print substr($2, 1, length($2)-1); exit}')

# Get IP address
ip=$(ifconfig $interface | awk '/inet / {print $2}')

# Get subnet mask
netmask=$(ifconfig $interface | awk '/netmask / {print $4}')

# Get Gateway
gateway=$(ip route | awk '/default/ {print $3}')

echo -e "${aoiBlue}Start configuring pre-installed file...${plain}"
mkdir temp_initrd
cd temp_initrd
gunzip -c ../initrd.gz | cpio -i

cat << EOF > preseed.cfg
d-i debian-installer/locale string en_US.UTF-8
d-i debian-installer/language string en
d-i debian-installer/country string CN
d-i keyboard-configuration/xkb-keymap select us
d-i passwd/make-user boolean false
d-i passwd/root-password password $passwd
d-i passwd/root-password-again password $passwd
d-i user-setup/allow-password-weak boolean true

### Network configuration
d-i netcfg/choose_interface select auto
# d-i netcfg/disable_autoconfig boolean true
d-i netcfg/dhcp_failed note
d-i netcfg/dhcp_options select Configure network manually
d-i netcfg/get_ipaddress string $ip
d-i netcfg/get_netmask string $netmask
d-i netcfg/get_gateway string $gateway
d-i netcfg/get_nameservers string 1.1.1.1 8.8.8.8
d-i netcfg/confirm_static boolean true

### Low memory mode
d-i lowmem/low note

### hostname
d-i netcfg/hostname string $HostName

### Mirror settings
d-i mirror/country string manual
d-i mirror/http/hostname string deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

d-i clock-setup/utc boolean true
d-i clock-setup/ntp boolean true
d-i time/zone string Asia/Shanghai
d-i partman-auto/disk string /dev/$DEVICE_PREFIX
d-i partman-auto/method string regular
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true
d-i partman-basicfilesystems/no_swap boolean false
d-i partman-auto/expert_recipe string                       \
200 1 200 ext4 \
        \$primary{ } \$bootable{ } \
        method{ format } format{ } \
        use_filesystem{ } filesystem{ ext4 } \
        mountpoint{ /boot } \
    . \
201 2 -1 ext4 \
        \$primary{ } \
        method{ format } format{ } \
        use_filesystem{ } filesystem{ ext4 } \
        mountpoint{ / } \
    .
d-i partman-md/confirm_nooverwrite boolean true
d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true

### Package selection
tasksel tasksel/first multiselect minimal ssh-server
d-i pkgsel/include string lrzsz net-tools rsync socat curl sudo wget telnet iptables gpg zsh python3 pip nmap tree iperf3

# Automatic updates are not applied, everything is updated manually.
d-i pkgsel/update-policy select none
d-i pkgsel/upgrade select none

d-i grub-installer/grub2_instead_of_grub_legacy boolean true
d-i grub-installer/only_debian boolean true
d-i grub-installer/bootdev string /dev/$DEVICE_PREFIX

### Write preseed
d-i preseed/late_command string \
sed -ri 's/^#?PermitRootLogin.*/PermitRootLogin yes/g' /target/etc/ssh/sshd_config; \
sed -ri 's/^#?Port.*/Port ${sshPORT}/g' /target/etc/ssh/sshd_config; \
${BBR}

### Shutdown machine
d-i finish-install/reboot_in_progress note
EOF
find . | cpio -H newc -o | gzip -6 > ../initrd.gz && cd ..
rm -rf temp_initrd 
cat << EOF >> /etc/grub.d/40_custom
menuentry "Digital-Review Debian Installer AMD64" {
    set root="(hd0,$partitionr_root_number)"
    linux /netboot/linux auto=true priority=critical lowmem/low=true preseed/file=/preseed.cfg
    initrd /netboot/initrd.gz
}
EOF

# Modifying the GRUB DEFAULT option
sed -i 's/^GRUB_DEFAULT=.*/GRUB_DEFAULT=2/' /etc/default/grub
# Modify the GRUB TIMEOUT option
sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=2/' /etc/default/grub

update-grub 

echo -en "\n${aoiBlue}Configuration complete...${plain}\n"

echo -ne "\n[${aoiBlue}Finish${plain}] Input '${red}reboot${plain}' to continue the subsequential installation.\n"
exit 1
